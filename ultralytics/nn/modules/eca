import torch, torch.nn as nn
class ECA(nn.Module):
    """Efficient Channel Attention (Wang et al., 2020)"""
    def __init__(self, channels, k_size=3):
        super().__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.conv = nn.Conv1d(1,1,k_size,padding=(k_size-1)//2,bias=False)
        self.sigmoid = nn.Sigmoid()
    def forward(self, x):
        y = self.avg_pool(x)              # b,c,1,1
        y = self.conv(y.squeeze(-1).transpose(-1,-2))  # b,1,c
        y = self.sigmoid(y).transpose(-1,-2).unsqueeze(-1)  # b,c,1,1
        return x * y
